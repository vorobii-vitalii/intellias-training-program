version: '3.7'
services:

### NGINX reverse proxy
  web:
    image: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./localhost.crt:/etc/nginx/certs/localhost.crt
      - ./localhost-privateKey.key:/etc/nginx/certs/localhost-privateKey.key
      - ./index.html:/www/data/index.html
    networks:
      - net
#    network_mode: host
    depends_on:
      - http-server
    ports:
      - "8000:80"
      - "443:443"
    environment:
      - NGINX_HOST=foobar.com
      - NGINX_PORT=80

# MongoDB replica set
  mongo1:
    image: mongo:latest
    container_name: mongo1
#    network_mode: host
    networks:
      net:
    command: ["--replSet", "my-replica-set", "--bind_ip_all", "--port", "30001"]
    volumes:
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - 30001:30001
    healthcheck:
#      test: test $$(echo "rs.initiate({_id:'my-replica-set',members:[{_id:0,host:\"mongo1:30001\"},{_id:1,host:\"mongo2:30002\"},{_id:2,host:\"mongo3:30003\"}]}).ok || rs.status().ok" | mongo --port 30001 --quiet) -eq 1
      test: test $$(echo "rs.initiate({_id:'my-replica-set',members:[{_id:0,host:\"mongo1:30001\"}]}).ok || rs.status().ok" | mongo --port 30001 --quiet) -eq 1
      interval: 10s

  jaeger:
    image: jaegertracing/all-in-one:1.39
    container_name: jaeger
#    network_mode: host
    networks:
      - net
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "4317:4317"
#      - "4318:4318"
      - "9411:9411"
    environment:
      - "COLLECTOR_ZIPKIN_HTTP_PORT=9411"
      - "COLLECTOR_OTLP_ENABLED=true"

## WebSocket servers
  http-server:
    image: my-repo/http-server:1.0-SNAPSHOT
    ports:
      - "8001:8000"
      - "8005:8005"
      - "9010:9010"
    restart: always
    logging:
      driver: gelf
      options:
        gelf-address: "udp://0.0.0.0:12201"
        tag: "document-streaming-app"
    depends_on:
      - mongo1
      - document-storage-service
      - jaeger
#    network_mode: host
    networks:
      - net
    environment:
      - "MONGO_URL=mongodb://mongo1:30001/?replicaSet=my-replica-set"
      - "DOCUMENT_STORAGE_SERVICE_URL=document-storage-service:9000"
      - "PORT=8000"
      - "JAEGER_ENDPOINT=http://jaeger:4317"
      - "HOST=0.0.0.0"


  ## Document storage service
  document-storage-service:
    image: my-repo/document-storage-service:1.0-SNAPSHOT
    ports:
      - "9000:9000"
      - "8006:8005"
      - "9011:9010"
    restart: always
    logging:
      driver: gelf
      options:
        gelf-address: "udp://0.0.0.0:12201"
        tag: "document-storage-service"
    depends_on:
      - mongo1
      - jaeger
    networks:
      - net
    environment:
      - "MONGO_URL=mongodb://mongo1:30001/?replicaSet=my-replica-set"
      - "SERVER_PORT=9000"
      - "JAEGER_ENDPOINT=http://jaeger:4317"

# net stack
  # The 'setup' service runs a one-off script which initializes users inside
  # Elasticsearch — such as 'logstash_internal' and 'kibana_system' — with the
  # values of the passwords defined in the '.env' file.
  #
  # This task is only performed during the *initial* startup of the stack. On all
  # subsequent runs, the service simply returns immediately, without performing
  # any modification to existing users.
  setup:
    build:
      context: setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./setup/lib.sh:/lib.sh:ro,Z
      - ./setup/roles:/roles:ro,Z
      - setup:/state:Z
    init: true
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
#    network_mode: host
    networks:
      - net
    depends_on:
      - elasticsearch

  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
    expose:
      - 9200
      - 9300
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms1024m -Xmx1024m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
#    network_mode: host
    networks:
      - net
    restart: unless-stopped

  logstash:
    build:
      context: logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - 5044:5044
      - 50000:50000/tcp
      - 50000:50000/udp
      - 12201:12201/udp
      - 9600:9600
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
#    network_mode: host
    networks:
      - net
    depends_on:
      - elasticsearch
    restart: unless-stopped

  kibana:
    build:
      context: kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - "5601:5601"
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
#    network_mode: host
    networks:
      - net
    depends_on:
      - elasticsearch
    restart: unless-stopped

  db:
    image: timescaledev/timescaledb-ha:pg12.14-ts2.10.3
#    network_mode: host
    networks:
      - net
    ports:
      - 5432:5432/tcp
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password

  promscale:
    image: timescale/promscale:latest
    ports:
      - 9201:9201/tcp
    restart: on-failure
    command:
      - '-startup.upgrade-prerelease-extensions=true'
#    network_mode: host
    networks:
      - net
    depends_on:
      - db
      - prometheus
    environment:
      PROMSCALE_DB_CONNECT_RETRIES: 10
      PROMSCALE_WEB_TELEMETRY_PATH: /metrics-text
      PROMSCALE_DB_URI: postgres://postgres:password@db:5432/postgres?sslmode=allow

# Metrics
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--enable-feature=native-histograms'
      - '--web.enable-remote-write-receiver'
      - '--web.enable-lifecycle'
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    restart: unless-stopped
#    network_mode: host
    networks:
      - net
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus

# Metrics visualisation
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
#    network_mode: host
    networks:
      - net
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources

networks:
  net:

volumes:
  setup:
  elasticsearch:
  prom_data:
